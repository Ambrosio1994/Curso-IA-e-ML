{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPeXqnq4w567p35aXNHEGh5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from zipfile import ZipFile\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"4-8h4dwRgK1c","executionInfo":{"status":"ok","timestamp":1715568958730,"user_tz":180,"elapsed":8916,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["<img src=\"http://cocl.us/neural_network_example\" alt=\"Neural Network Example\" width=\"600px\">"],"metadata":{"id":"1CYRv2YN4OAu"}},{"cell_type":"code","source":["import numpy as np # import Numpy library to generate\n","\n","weights = np.around(np.random.uniform(size=6), decimals=2) # initialize the weights\n","biases = np.around(np.random.uniform(size=3), decimals=2) # initialize the biases"],"metadata":{"id":"qStBAavp3Tmy","executionInfo":{"status":"ok","timestamp":1715568958731,"user_tz":180,"elapsed":58,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["print(weights)\n","print(biases)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ad7yPkOh3Tj5","executionInfo":{"status":"ok","timestamp":1715568958731,"user_tz":180,"elapsed":57,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"1f786617-fab3-448a-a33f-9629fd3f47ce"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.12 0.99 0.91 0.6  0.27 0.66]\n","[0.07 0.28 0.58]\n"]}]},{"cell_type":"code","source":["x_1 = 0.5 # input 1\n","x_2 = 0.85 # input 2\n","\n","print('x1 is {} and x2 is {}'.format(x_1, x_2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OIablbpC3Tgu","executionInfo":{"status":"ok","timestamp":1715568958731,"user_tz":180,"elapsed":55,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"814cb194-6c6f-4bf7-ae58-3a61e2561d6a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["x1 is 0.5 and x2 is 0.85\n"]}]},{"cell_type":"code","source":["z_11 = x_1 * weights[0] + x_2 * weights[1] + biases[0]\n","\n","print('The weighted sum of the inputs at the first node in the hidden layer is {}'.format(z_11))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8DA0KF2w3TeI","executionInfo":{"status":"ok","timestamp":1715568958731,"user_tz":180,"elapsed":53,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"37e35b54-152e-4c04-b2ca-d498ffdedd60"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["The weighted sum of the inputs at the first node in the hidden layer is 0.9715\n"]}]},{"cell_type":"code","source":["z_12 =  x_1 * weights[2] + x_2 * weights[3] + biases[1]\n","print('The weighted sum of the inputs at the second node in the hidden layer is {}'.format(np.around(z_12, decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r-q5ms043TbV","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":51,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"36df9c10-e996-4141-924f-3bf7d192f7f3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["The weighted sum of the inputs at the second node in the hidden layer is 1.245\n"]}]},{"cell_type":"code","source":["a_11 = 1.0 / (1.0 + np.exp(-z_11))\n","\n","print('The activation of the first node in the hidden layer is {}'.format(np.around(a_11, decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4ckbDFf3i2A","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":48,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"826c3714-de26-49d8-b34d-4b852f80eebd"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["The activation of the first node in the hidden layer is 0.7254\n"]}]},{"cell_type":"code","source":["a_12 = 1.0 / (1.0 + np.exp(-z_12))\n","print('The activation of the second node in the hidden layer is {}'.format(np.around(a_12, decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m1Slp0Mu3izJ","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":46,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"cc0a6d9c-7660-4572-9c73-4e0e2bddac2d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The activation of the second node in the hidden layer is 0.7764\n"]}]},{"cell_type":"code","source":["z_2 = a_11 * weights[4] + a_12 * weights[5] + biases[2]\n","print('The weighted sum of the inputs at the node in the output layer is {}'.format(np.around(z_2, decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mXZrXHpg3iwd","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":44,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"6163a315-ed50-4b24-fca9-9acb48954ef3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["The weighted sum of the inputs at the node in the output layer is 1.2883\n"]}]},{"cell_type":"code","source":["a_2 = 1.0 / (1.0 + np.exp(-z_2))\n","print('The output of the network for x1 = 0.5 and x2 = 0.85 is {}'.format(np.around(a_2, decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jyvn0NcK3itf","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":42,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"43ffe22f-dbfc-4d6c-e195-cafe06cd305b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["The output of the network for x1 = 0.5 and x2 = 0.85 is 0.7839\n"]}]},{"cell_type":"code","source":["n = 2 # number of inputs\n","num_hidden_layers = 2 # number of hidden layers\n","m = [2, 2] # number of nodes in each hidden layer\n","num_nodes_output = 1 # number of nodes in the output layer"],"metadata":{"id":"xJ5kJ7IVl4w9","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":40,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["num_nodes_previous = n # number of nodes in the previous layer\n","\n","network = {} # initialize network an an empty dictionary\n","\n","# loop through each layer and randomly initialize the weights and biases associated with each node\n","# notice how we are adding 1 to the number of hidden layers in order to include the output layer\n","for layer in range(num_hidden_layers + 1):\n","\n","    # determine name of layer\n","    if layer == num_hidden_layers:\n","        layer_name = 'output'\n","        num_nodes = num_nodes_output\n","    else:\n","        layer_name = 'layer_{}'.format(layer + 1)\n","        num_nodes = m[layer]\n","\n","    # initialize weights and biases associated with each node in the current layer\n","    network[layer_name] = {}\n","    for node in range(num_nodes):\n","        node_name = 'node_{}'.format(node+1)\n","        network[layer_name][node_name] = {\n","            'weights': np.around(np.random.uniform(size=num_nodes_previous), decimals=2),\n","            'bias': np.around(np.random.uniform(size=1), decimals=2),\n","        }\n","\n","    num_nodes_previous = num_nodes\n","\n","print(network) # print network"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qplsV7i0tx8r","executionInfo":{"status":"ok","timestamp":1715568958732,"user_tz":180,"elapsed":40,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"11c7a96c-b2f7-4395-c5b8-5c0c9380cbf4"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["{'layer_1': {'node_1': {'weights': array([0.95, 0.04]), 'bias': array([0.42])}, 'node_2': {'weights': array([0.7 , 0.25]), 'bias': array([0.81])}}, 'layer_2': {'node_1': {'weights': array([0.86, 0.93]), 'bias': array([0.56])}, 'node_2': {'weights': array([0.05, 0.38]), 'bias': array([0.27])}}, 'output': {'node_1': {'weights': array([0.7 , 0.84]), 'bias': array([0.65])}}}\n"]}]},{"cell_type":"code","source":["def initialize_network(num_inputs, num_hidden_layers, num_nodes_hidden, num_nodes_output):\n","\n","    num_nodes_previous = num_inputs # number of nodes in the previous layer\n","\n","    network = {}\n","\n","    # loop through each layer and randomly initialize the weights and biases associated with each layer\n","    for layer in range(num_hidden_layers + 1):\n","\n","        if layer == num_hidden_layers:\n","            layer_name = 'output' # name last layer in the network output\n","            num_nodes = num_nodes_output\n","        else:\n","            layer_name = 'layer_{}'.format(layer + 1) # otherwise give the layer a number\n","            num_nodes = num_nodes_hidden[layer]\n","\n","        # initialize weights and bias for each node\n","        network[layer_name] = {}\n","        for node in range(num_nodes):\n","            node_name = 'node_{}'.format(node+1)\n","            network[layer_name][node_name] = {\n","                'weights': np.around(np.random.uniform(size=num_nodes_previous), decimals=2),\n","                'bias': np.around(np.random.uniform(size=1), decimals=2),\n","            }\n","\n","        num_nodes_previous = num_nodes\n","\n","    return network # return the network"],"metadata":{"id":"OUXHkf8kt48z","executionInfo":{"status":"ok","timestamp":1715568958733,"user_tz":180,"elapsed":27,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["small_network = initialize_network(num_inputs=5, num_hidden_layers=3, num_nodes_hidden=(3,2,3), num_nodes_output=1)"],"metadata":{"id":"E8r82czTwh63","executionInfo":{"status":"ok","timestamp":1715568958733,"user_tz":180,"elapsed":26,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def compute_weighted_sum(inputs, weights, bias):\n","    return np.sum(inputs * weights) + bias"],"metadata":{"id":"vviM3dV7yATe","executionInfo":{"status":"ok","timestamp":1715568958734,"user_tz":180,"elapsed":27,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from random import seed\n","\n","np.random.seed(12)\n","inputs = np.around(np.random.uniform(size=5), decimals=2)\n","\n","print('The inputs to the network are {}'.format(inputs))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pyR4llrlyCeE","executionInfo":{"status":"ok","timestamp":1715568958734,"user_tz":180,"elapsed":26,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"1a2b809b-05eb-4cac-fe5a-e756074da06f"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["The inputs to the network are [0.15 0.74 0.26 0.53 0.01]\n"]}]},{"cell_type":"code","source":["node_weights = small_network['layer_1']['node_1']['weights']\n","node_bias = small_network['layer_1']['node_1']['bias']\n","\n","weighted_sum = compute_weighted_sum(inputs, node_weights, node_bias)\n","print('The weighted sum at the first node in the hidden layer is {}'.format(np.around(weighted_sum[0], decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Av9FVszyHiR","executionInfo":{"status":"ok","timestamp":1715568958734,"user_tz":180,"elapsed":24,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"cc51e7e5-ee3d-4a78-edcb-ab6c15a675f8"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["The weighted sum at the first node in the hidden layer is 0.6774\n"]}]},{"cell_type":"code","source":["def node_activation(weighted_sum):\n","    return 1.0 / (1.0 + np.exp(-weighted_sum))"],"metadata":{"id":"28UPcsK_yyeq","executionInfo":{"status":"ok","timestamp":1715568958734,"user_tz":180,"elapsed":21,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["def forward_propagate(network, inputs):\n","\n","    layer_inputs = list(inputs) # start with the input layer as the input to the first hidden layer\n","\n","    for layer in network:\n","\n","        layer_data = network[layer]\n","\n","        layer_outputs = []\n","        for layer_node in layer_data:\n","\n","            node_data = layer_data[layer_node]\n","\n","            # compute the weighted sum and the output of each node at the same time\n","            node_output = node_activation(compute_weighted_sum(layer_inputs, node_data['weights'], node_data['bias']))\n","            layer_outputs.append(np.around(node_output[0], decimals=4))\n","\n","        if layer != 'output':\n","            print('The outputs of the nodes in hidden layer number {} is {}'.format(layer.split('_')[1], layer_outputs))\n","\n","        layer_inputs = layer_outputs # set the output of this layer to be the input to next layer\n","\n","    network_predictions = layer_outputs\n","    return network_predictions"],"metadata":{"id":"TN9R4ezKzKOO","executionInfo":{"status":"ok","timestamp":1715568958735,"user_tz":180,"elapsed":21,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["predictions = forward_propagate(small_network, inputs)\n","print('The predicted value by the network for the given input is {}'.format(np.around(predictions[0], decimals=4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y9uFqKBBzpY7","executionInfo":{"status":"ok","timestamp":1715568958735,"user_tz":180,"elapsed":21,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"e07d610e-52bf-4bdf-9a79-4037160f80f0"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["The outputs of the nodes in hidden layer number 1 is [0.6632, 0.6155, 0.7408]\n","The outputs of the nodes in hidden layer number 2 is [0.8326, 0.9197]\n","The outputs of the nodes in hidden layer number 3 is [0.8245, 0.8228, 0.7632]\n","The predicted value by the network for the given input is 0.8863\n"]}]},{"cell_type":"code","source":["my_network = initialize_network(5, 3, [2, 3, 2], 3)"],"metadata":{"id":"63qRhjUy16ht","executionInfo":{"status":"ok","timestamp":1715568958735,"user_tz":180,"elapsed":19,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["inputs = np.around(np.random.uniform(size=5), decimals=2)\n","inputs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hq1RQFtQ1-db","executionInfo":{"status":"ok","timestamp":1715568958735,"user_tz":180,"elapsed":19,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"8de82586-16f1-42db-9056-2548c30c15c5"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.96, 0.42, 0.42, 0.46, 0.37])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["predictions = forward_propagate(my_network, inputs)\n","print('The predicted values by the network for the given input are {}'.format(predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b9ibMmM92HOD","executionInfo":{"status":"ok","timestamp":1715568958736,"user_tz":180,"elapsed":18,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"91b99d70-f5c6-480b-eb3b-191cf0d7342f"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["The outputs of the nodes in hidden layer number 1 is [0.8857, 0.8889]\n","The outputs of the nodes in hidden layer number 2 is [0.7822, 0.6965, 0.7411]\n","The outputs of the nodes in hidden layer number 3 is [0.868, 0.881]\n","The predicted values by the network for the given input are [0.8952, 0.8222, 0.8035]\n"]}]},{"cell_type":"code","source":["network = initialize_network(10, 2, [4, 4], 3)\n","inputs = np.around(np.random.uniform(size=10), decimals=2)"],"metadata":{"id":"2SqAmCfl2Nkj","executionInfo":{"status":"ok","timestamp":1715569017224,"user_tz":180,"elapsed":806,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["predictions = forward_propagate(network, inputs)\n","print('The predicted values by the network for the given input are {}'.format(predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9T5yiag12kV4","executionInfo":{"status":"ok","timestamp":1715569020426,"user_tz":180,"elapsed":564,"user":{"displayName":"DIEGO AMBROSIO","userId":"04645390355005059837"}},"outputId":"027cb803-277a-4bf7-9d2e-fe101d86c211"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["The outputs of the nodes in hidden layer number 1 is [0.95, 0.9754, 0.9671, 0.9674]\n","The outputs of the nodes in hidden layer number 2 is [0.8535, 0.857, 0.9687, 0.959]\n","The predicted values by the network for the given input are [0.9072, 0.7671, 0.6848]\n"]}]}]}